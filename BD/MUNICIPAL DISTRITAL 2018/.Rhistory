vacunas
class(vacunas)
library(lubridate)
install.packages("lubridate")
library(lubridate)
vacunas <- vacunas |>  mutate(fecha=ymd(FECHA_VACUNACION)) #Nueva variable: Acumulado de goles
install.packages("dplyr")
library(dplyr)
vacunas <- vacunas |>  mutate(fecha=ymd(FECHA_VACUNACION)) #Nueva variable: Acumulado de goles
View(vacunas)
vacunas_new |>
group_by(fecha) |>
summarise(count_fecha=count())
vacunas <- vacunas |> mutate(count=1)
vacunas
vacunas_new |>
group_by(fecha) |>
summarise(count_fecha=count(count))
vacunas_new <- vacunas |>
group_by(fecha) |>
summarise(count_fecha=count(count))
vacunas_new <- vacunas |>
group_by(fecha) |>
summarise(count_fecha=sum(count))
vacunas_new
vacunas_new
vacunas |> filter(DOSIS== 3)
vacunas_new_2 <- vacunas |>
group_by(DISTRITO) |>
summarise(count_fecha=sum(count))
vacunas_new_2
vacunas <- vacunas |> filter(DOSIS== 3)
vacunas_new_2 <- vacunas |>
group_by(DISTRITO) |>
summarise(count_fecha=sum(count))
vacunas_new_2
print(n=81)
vacunas_new_2.print(n=81)
print(vacunas_new_2, n=81)
install.packages("tidyverse")
library(tidy)
library(tidyverse)
install.packages("dplyr")
install.packages("dplyr")
install.packages("gapminder")
library(gapminder)
data<-gapminder::gapminder
head(data,3)
help(aes())
data |> ggplot()
install.packages("ggplot")
data |> ggplot()
data |> ggplot() + aes(x = lifeExp)
data<-gapminder::gapminder
head(data,3)
install.packages("ggplot2")
#pipe con ctrl+shift+m
data |> ggplot() + aes(x = lifeExp)
data |> ggplot() +
aes(x = lifeExp)
library(tidyverse)
library(ggplot2)
library(gapminder)
data<-gapminder::gapminder
head(data,3)
#data
#aes() : aestetica
#geom_*(): tipo de grafico a construir
## grafico base ----
#pipe con ctrl+shift+m
data |> ggplot() +
aes(x = lifeExp)
data |> ggplot() +
aes(x = lifeExp) +
geom_histogram()
library(dplyr)
data |> ggplot() +
aes(x = lifeExp) +
geom_histogram(binwidth=5,color="white")
hist(data$lifeExp)
hist(data$lifeExp)
### boxplot -----
data |> ggplot() +
aes(x = lifeExp) +
geom_boxplot(binwidth=5,color="white")
### boxplot -----
data |> ggplot() +
aes(x = lifeExp) +
geom_boxplot()
### boxplot -----
data |> ggplot() +
aes(y = lifeExp) +
geom_boxplot()
### boxplot -----
data |> ggplot() +
aes(y = lifeExp) +
geom_boxplot()
library(tidyverse)
library(ggplot2)
library(gapminder)
data<-gapminder::gapminder
head(data,3)
#data
#aes() : aestetica
#geom_*(): tipo de grafico a construir
## grafico base ----
#pipe con ctrl+shift+m
### histograma -----
data |> ggplot() +
aes(x = lifeExp) +
geom_histogram(binwidth=5,color="white")
### boxplot -----
data |> ggplot() +
aes(y = lifeExp) +
geom_boxplot()
dev.off
#install.packages("tidyverse")
#install.packages("dplyr")
#install.packages("gapminder")
library(tidyverse)
library(ggplot2)
library(gapminder)
data<-gapminder::gapminder
head(data,3)
#data
#aes() : aestetica
#geom_*(): tipo de grafico a construir
## grafico base ----
#pipe con ctrl+shift+m
### histograma -----
data |> ggplot() +
aes(x = lifeExp) +
geom_histogram(binwidth=5,color="white")
data |>
ggplot() +
aes(y = lifeExp) +
geom_boxplot(notch = TRUE, color = "blue")
dev.off
#install.packages("gapminder")
library(tidyverse)
library(ggplot2)
library(gapminder)
data<-gapminder::gapminder
head(data,3)
data |>
ggplot() +
aes(y = lifeExp) +
geom_boxplot(notch = TRUE, color = "blue")
library(tidyverse)
library(ggplot2)
library(gapminder)
data<-gapminder::gapminder
head(data,3)
data |> ggplot() +
aes(x = lifeExp) +
geom_histogram(binwidth=5,color="white")
data |> ggplot() +
aes(y = lifeExp) +
geom_boxplot(notch = TRUE, color = "blue")
data |>
ggplot() +
aes(y = lifeExp) +
geom_boxplot(notch = TRUE, color = "blue")
data |>
ggplot() +
aes(x = lifeExp, y=gdpPercap) +
geom_point()
data |>
ggplot() +
aes(x = lifeExp, y=gdpPercap) +
geom_point() +
aes(color = continent) +
geom_smooth()
data |>
filter(country=="Peru", year>1970)
data |>
filter(country=="Peru", year>1970) +
ggplot() +
aes(x=year, y=gdpPercap) +
geom_line() +
geom_point()
data |>
filter(country=="Peru", year>1970) |>
ggplot() +
aes(x=year, y=gdpPercap) +
geom_line() +
geom_point()
data |>
select(country, continent) |>
group_by(continent) |>
filter(!duplicated(country)) |>
ungroup() |>
ggplot() |>
geom_bar()
data |>
select(country, continent) |>
group_by(continent) |>
filter(!duplicated(country)) |>
ungroup() |>
ggplot() +
aes(x=continent) +
geom_bar()
data |>
select(-4, -5) |>
mutate(gdp_cat= case_when (
gdpPercap<4000~ "Bajo GDPpc",
TRUE~ "Alto GDPpc")) |>
filter(year==2007) |>
ggplot() +
aes(x=continent, fill=gdp_cat) +
geom_bar()
data |>
select(-4, -5) |>
mutate(gdp_cat= case_when (
gdpPercap<4000~ "Bajo GDPpc",
TRUE~ "Alto GDPpc")) |>
filter(year==2007) |>
ggplot() +
aes(x=continent, y=gdpPercap) +
aes(color=continent) +
geom_boxplot()
data |>
filter(continent=="Oceania") |>
ggplot() +
aes(x=year, y=lifeExp) +
geom_point() +
aes(color=continent) +
facet_wrap(~continent)
data |>
ggplot() +
aes(x=year, y=lifeExp) +
geom_point() +
aes(color=continent) +
facet_wrap(~continent)
data |>
mutate(gdp_cat=case_when(
gdpPercap<4000~ "Bajo GDPpc",
TRUE~ "Alto GDPpc"))  |>
filter(year==2007) |>
ggplot()+
aes(x=continent, group=gdp_cat, color=gdp_cat)+
stat_summary(aes(y=gdpPercap),
fun ="mean",
geom="point") +
stat_summary(aes(y=gdpPercap),  #<<
fun ="mean",  #<<
geom="line")  #<<
data |>
mutate(gdp_cat=case_when(
gdpPercap<4000~ "Bajo GDPpc",
TRUE~ "Alto GDPpc"))  |>
filter(year==2007) |>
ggplot()+
aes(x=continent, group=gdp_cat, color=gdp_cat)+
stat_summary(aes(y=gdpPercap),
fun ="mean",
geom="point")
data |>
mutate(gdp_cat=case_when(
gdpPercap<4000~ "Bajo GDPpc",
TRUE~ "Alto GDPpc"))  |>
filter(year==2007) |>
ggplot()+
aes(x=continent, group=gdp_cat, color=gdp_cat)+
stat_summary(aes(y=gdpPercap),
fun ="mean",
geom="point") +
stat_summary(aes(y=gdpPercap),  #<<
fun ="mean",  #<<
geom="line")  #<<
data |>
select(-4, -5) |>
mutate(gdp_cat=case_when(
gdpPercap<4000~ "Bajo GDPpc",
TRUE~ "Alto GDPpc")) |>
filter(year==2007) |>
ggplot()+
aes(x=continent)+ aes(y=gdpPercap) +
aes(color=continent) +
geom_boxplot()+
stat_summary(fun ="mean",
colour="red",
size = 5,
geom="point") +
stat_summary(fun ="median",  #<<
colour="blue",  #<<
size = 5,  #<<
geom="point")  #<<
install.packages("gganimate")
install.packages("png")
install.packages("gifski")
install.packages("av")
install.packages("gganimate")
library(gganimate)
data |>
ggplot()+
aes(x = gdpPercap, y = lifeExp,
size = pop, color = country) |>
geom_point(show.legend = F, alpha = 0.7) +
scale_x_log10() +
labs(x = 'GDP Per Capita',
y = 'Life Expectancy') +
scale_size(range = c(2, 15)) +
transition_time(year)+
labs(title = "Producto Bruto Interno vs Esperanza de Vida",
subtitle = "Year:{frame_time}") +
shadow_wake(0.5)
data |>
ggplot()+
aes(x = gdpPercap, y = lifeExp,
size = pop, color = country) |>
geom_point(show.legend = F, alpha = 0.7) +
scale_x_log10() +
labs(x = 'GDP Per Capita',
y = 'Life Expectancy') +
scale_size(range = c(2, 15)) +
transition_time(year)+
labs(title = "Producto Bruto Interno vs Esperanza de Vida",
subtitle = "Year:{frame_time}")
install.packages("ggrepel")
data |>
ggplot()+
aes(x = gdpPercap, y = lifeExp,
size = pop, color = country) |>
geom_point(show.legend = F, alpha = 0.7) +
scale_x_log10() +
labs(x = 'GDP Per Capita',
y = 'Life Expectancy') +
scale_size(range = c(2, 15)) +
transition_time(year)+
labs(title = "Producto Bruto Interno vs Esperanza de Vida",
subtitle = "Year:{frame_time}")
install.packages("packman")
library(pacman)
install.packages("pacman")
library(pacman)
p_load("VIM","DEoptimR","minqa","nloptr","simputation", "mice", "tidyverse", "DMwR2")
help(tao)
data(tao)
head(tao)
summary(tao)
help(NA)
any_na(tao)
anyNA(tao)
p_load("VIM","DEoptimR","minqa","nloptr","simputation", "mice", "tidyverse", "DMwR2", "naniar")
#base de datos libres
help(tao)
data(tao)
head(tao)
summary(tao)
help(NA) #significa "Not Available"
# DIAGNÓSTICO DE DATOS PERDIDOS ----
## Primera identificación ----
# Ver la cantidad y porcentaje de valores perdidos
### Según toda la data -----
# Descriptivo:
anyNA(tao) #si existe variables missing en los datos
any_na(tao) #si existe variables missing en los datos
prop_miss(tao)
pct_miss(tao)
n_complete(tao)
### Según variable -----
miss_var_summary(tao)
miss_var_table(tao)
### Según casos -----
miss_case_summary(tao)
miss_case_table(tao)
## Gráficamente -----
vis_miss(tao) # Primera visualización macro
gg_miss_case(tao) # Número de casos según número de valores perdidos.
gg_miss_upset(tao) #Valores perdidos de acuerdo a posibles combinaciones.
vis_miss(tao) # Primera visualización macro
gg_miss_case(tao) # Número de casos según número de valores perdidos.
gg_miss_upset(tao) #Valores perdidos de acuerdo a posibles combinaciones.
a=aggr(tao,numbers=T)
a
summary(a)
aggr(tao,numbers=T, sortComb=TRUE, sortVar=TRUE, only.miss=TRUE)
matrixplot(tao)
matrixplot(tao)
x11()
matrixplot(tao)
# Foto de tu dataset en colores.
# Rojo: Los datos faltantes
# Escala de grises según valores de vectores numéricos
# Para poder inspeccionar necesitamos que la gráfica sea interactiva y utilizamos x11()http://127.0.0.1:46679/graphics/f8926c43-bdee-4bc1-a80a-7553a525cae9.png
x11()
## Mecanismo completamente aleatorio (MCAR)?
## O mecanismo aleatorio (MAR)?
matrixplot(tao)
# Foto de tu dataset en colores.
# Rojo: Los datos faltantes
# Escala de grises según valores de vectores numéricos
# Para poder inspeccionar necesitamos que la gráfica sea interactiva y utilizamos
x11()
matrixplot(tao)
# Foto de tu dataset en colores.
# Rojo: Los datos faltantes
# Escala de grises según valores de vectores numéricos
# Para poder inspeccionar necesitamos que la gráfica sea interactiva y utilizamos
x11()
# Foto de tu dataset en colores.
# Rojo: Los datos faltantes
# Escala de grises según valores de vectores numéricos
# Para poder inspeccionar necesitamos que la gráfica sea interactiva y utilizamos
x11()
matrixplot(tao)
# Foto de tu dataset en colores.
# Rojo: Los datos faltantes
# Escala de grises según valores de vectores numéricos
# Para poder inspeccionar necesitamos que la gráfica sea interactiva y utilizamos
x11()
matrixplot(tao)
# Foto de tu dataset en colores.
# Rojo: Los datos faltantes
# Escala de grises según valores de vectores numéricos
# Para poder inspeccionar necesitamos que la gráfica sea interactiva y utilizamos
x11()
matrixplot(tao)
# Foto de tu dataset en colores.
# Rojo: Los datos faltantes
# Escala de grises según valores de vectores numéricos
# Para poder inspeccionar necesitamos que la gráfica sea interactiva y utilizamos
x11()
matrixplot(tao)
miss_var_table(tao)
miss_var_summary(tao)
vis_miss(tao)
#Importación de datos----
#primero fijamos el directorio donde se ubican los archivos
setwd("C:/Users/DELL/Documents/GitHub/R_basics_QLAb/BD/MUNICIPAL DISTRITAL 2018/")
getwd()
#install.packages("ggpol")
#importamos en df cada uno de los archivos
library(readxl)
library(ggplot2)
library(ggpol)
#library(rio)
library(dplyr)
library(tidyverse)
library(magrittr)
candidatos <- read_xlsx("ERM2018_Candidatos_Distrital.xlsx")
padron <- read_xlsx("ERM2018_Padron_Distrital.xlsx")
resultados <- read_xlsx("ERM2018_Resultados_Distrital.xlsx")
autoridades <- read_xlsx("ERM2018_Autoridades_Distrital.xlsx")
names(candidatos)
#este df muestra los candidatos por distrios y partido politico
names(padron)
#este df muestra la proporcion de electores por distrito, edad y sexo
names(resultados)
# df que muestra los resultados por distrito y partido politico
names(autoridades)
# df que muestra los alcades elegidos y sus regidores por distrito
# comentarios----
##electores (padron)----
#distribucion de electores por sexo, por edad (4 escenarios)
#distribucion de electores por macroregion (costa, sierra, selva -- norte, centro y sur)
##candidatos----
#distribucion de candidatos por organizacion politica, sexo (opc agregar cargo, nativo)
#distribucion de candidatos por cargo y sexo
#distribucion de candidatos por macroregion (costa, sierra, selva -- norte, centro y sur)
#analizar el campo 'N°' del df
#distribucion de candidatos por tipo de organizacion politica (unique(candidatos$`Tipo Organización Política`))
##autoridades----
#distribucion de autoridades elegidas por organizacion politica, sexo (opc agregar cargo, nativo)
#distribucion de candidatos por cargo y sexo
#distribucion de candidatos por macroregion (costa, sierra, selva -- norte, centro y sur)
#distribucion de candidatos por tipo de organizacion politica
#qué tanto se pasó el umbral minimo para ganar la eleccion (30%)? diferenciar por sexo
#alcades y regidores pertenecen a la misma organización politica? analizar efecto arrastre
##resultados----
#distribucion de participacion por region
#comparar %votos vs %votos organizacion politica (df autoridades)
#para edades indicar solamente la proporcion de jovenes respecto al total
candidatos[,c("Region", "Provincia", "Distrito", "Organización Política", "Tipo Organización Política", "Cargo", "Sexo", "Joven")] <- lapply(candidatos[,c("Region", "Provincia", "Distrito", "Organización Política", "Tipo Organización Política", "Cargo", "Sexo", "Joven")], as.numeric)
summary(candidatos)
autoridades <- as.data.frame(autoridades)
#Gráfico de parlamento de las ganadores a regidores municipales jovenes y no jovenes por sexo
class(autoridades$Joven)
autoridades <- autoridades |>
dplyr::mutate(Joven = ifelse(is.na(Joven), "No joven", Joven)) |>
dplyr::mutate(Nativo = ifelse(is.na(Nativo), "No nativo", Nativo))
aut_sum <- autoridades |>
filter(autoridades$`Cargo electo`== "REGIDOR DISTRITAL") |>
dplyr::group_by(Joven, Sexo) |>
dplyr::summarise(regidores=round(n()/100))
aut_sum <-aut_sum |>
mutate(colors = case_when(Joven == 'Joven' | Sexo == 'Femenino' ~ 'lightpink',
Joven == 'Joven' | Sexo == 'Masculino' ~ 'lightblue',
Joven == 'No joven' | Sexo == 'Femenino' ~ 'pink',
Joven == 'No joven' | Sexo == 'Masculino' ~ 'blue'
))
ggplot(aut_sum) +
geom_parliament(aes(seats = regidores, fill = Joven), color = "black") +
scale_fill_manual(values = aut_sum$colors, labels = aut_sum$Joven) +
coord_fixed() +
theme_void()+
labs(title = "Numero de representantes jovenes y no jovenes por sexo")
autoridades <- autoridades |>
dplyr::mutate(Joven = ifelse(is.na(Joven), "No Joven", Joven)) |>
dplyr::mutate(Nativo = ifelse(is.na(Nativo), "No Nativo", Nativo))
aut_sum <- autoridades |>
filter(autoridades$`Cargo electo`== "REGIDOR DISTRITAL") |>
dplyr::group_by(Joven, Sexo) |>
dplyr::summarise(regidores=round(n()/100))
aut_sum <-aut_sum |>
mutate(colors = case_when(Joven == 'Joven' | Sexo == 'Femenino' ~ 'lightpink',
Joven == 'Joven' | Sexo == 'Masculino' ~ 'lightblue',
Joven == 'No Joven' | Sexo == 'Femenino' ~ 'pink',
Joven == 'No Joven' | Sexo == 'Masculino' ~ 'blue'
))
View(aut_sum)
